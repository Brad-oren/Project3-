
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
module Project3(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);


reg reset;
reg right;
reg[1:0] dout;

wire switch0;
wire switch1;
wire but1;
//wire[1:0] dout;
wire[2:0] state;
wire[2:0] Lcba;
wire[2:0] Rabc;
wire[7:0] Q;
wire[7:0] address;
wire clock1;
wire clock2;



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================


clock_divider #(2_500_000) u0 (.clk(ADC_CLK_10),.reset_n(KEY[0]),.outclk(clock1)); 
clock_divider #(25_000_000) u1 (.clk(ADC_CLK_10),.reset_n(KEY[0]),.outclk(clock2)); 



always @(posedge clock2)begin
	if(~KEY[0])
		dout <= 0;
	else
		dout <= dout + 1;
	end
 
	
assign address = {6'b0,dout};

mem m0(.address(address),.clock(clock1),.q(Q));



always @(negedge KEY[1])
	right <= ~right;


	assign switch0 = SW [9]? Q[0]:SW[0];
	assign switch1 = SW[9]? Q[1]:SW[1];
	assign but1 = SW[9]? Q[2]:right;


tailLightStateMachine f1(.clk(clock1),.reset(~KEY[0]),.hazard(switch0),.left(switch1),.right(but1),.Lcba(Lcba),.Rabc(Rabc),.state(state));
tailLightdimmer d1(.dimclk(clock1),.Lcba(Lcba),.Rabc(Rabc),.Lc(LEDR[9]),.Lb(LEDR[8]),.La(LEDR[7]),.Ra(LEDR[2]),.Rb(LEDR[1]),.Rc(LEDR[0]));
sev_seg1 s1(.data(state), .display(HEX0));
sev_seg2 s2(.data(state), .display(HEX1));

assign HEX2 = 8'b11111111;
assign HEX3 = 8'b11111111;
assign HEX4 = 8'b11111111;
assign HEX5 = 8'b11111111;

endmodule
